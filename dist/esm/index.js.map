{"file":"index.js","mappings":"SAGgB,MAAM,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa;IACnE,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACjF;;;;","names":[],"sources":["src/utils/utils.ts"],"sourcesContent":["import { Appearance } from '@stripe/stripe-js';\r\nimport { predefinedThemes, WG_DEFAULT_BUTTON_BG, WG_DEFAULT_ELEMENT_BORDER } from './constants';\r\n\r\nexport function format(first?: string, middle?: string, last?: string): string {\r\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\r\n}\r\n\r\n// It capitalizes the first letter of each word in the string and makes the rest lowercase.\r\nexport const capitalizeFirstCharOfEachWord = (text: string) => {\r\n  return text\r\n    .toLowerCase()\r\n    .split(' ')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n};\r\n\r\nexport const resolveCssVariable = (cssVar: string): string => {\r\n  if (!cssVar || cssVar === '' || !cssVar.startsWith('var(')) return cssVar; // Return as-is if not a CSS variable\r\n\r\n  try {\r\n    const variableName = cssVar.substring(4, cssVar.indexOf(')')).trim();\r\n    const computedStyle = window.getComputedStyle(document.documentElement);\r\n    return computedStyle.getPropertyValue(variableName).trim();\r\n  } catch (error) {\r\n    console.error(`Error resolving CSS variable: ${cssVar}`, error);\r\n    return cssVar;\r\n  }\r\n};\r\n\r\nexport const areColorArraysEqual = (arr1: string[], arr2: string[]): boolean =>\r\n  arr1.length === arr2.length && arr1.every((val, index) => resolveCssVariable(val) === resolveCssVariable(arr2[index]));\r\n\r\nexport const getAvatarInitials = (name: string, surname: string) => {\r\n  if (name && surname) {\r\n    return name.charAt(0).toUpperCase() + surname.charAt(0).toUpperCase();\r\n  } else if (name) {\r\n    return name.charAt(0).toUpperCase() + name.charAt(1).toUpperCase();\r\n  } else if (surname) {\r\n    return surname.charAt(0).toUpperCase() + surname.charAt(1).toUpperCase();\r\n  } else {\r\n    return 'UU'; //Unknown User\r\n  }\r\n};\r\n\r\nexport const getWidgetButtonAndBorderColors = (primaryColor, secondaryColor) => {\r\n  let buttonBgColor = WG_DEFAULT_BUTTON_BG;\r\n  let elemBorderColor = WG_DEFAULT_ELEMENT_BORDER;\r\n\r\n  if (primaryColor && secondaryColor) {\r\n    const theme = predefinedThemes.find(t => areColorArraysEqual(t.colors, [primaryColor, secondaryColor]));\r\n    buttonBgColor = theme?.buttonBgColor ?? WG_DEFAULT_BUTTON_BG;\r\n    elemBorderColor = theme?.elementBorderColor ?? WG_DEFAULT_ELEMENT_BORDER;\r\n  }\r\n\r\n  return { buttonBgColor, elemBorderColor };\r\n};\r\n\r\nexport const getStripeWidgetFontColor = (bgColor: string, fontClr: string) => {\r\n  return resolveCssVariable(getContrastColor(bgColor, fontClr).isContrastGood ? fontClr : getContrastColor(bgColor).blackOrWhite);\r\n};\r\n\r\nexport const getStripeElementAppearance = (fontColor, primaryColor, secondaryColor) => {\r\n  const secondary = resolveCssVariable(secondaryColor);\r\n  const buttonBgColor = getWidgetButtonAndBorderColors(primaryColor, secondaryColor).buttonBgColor;\r\n  const stripeFontColor =  getStripeWidgetFontColor(buttonBgColor, fontColor)\r\n\r\n  return {\r\n    // https://docs.stripe.com/elements/appearance-api\r\n    theme: 'stripe' as Appearance[\"theme\"],\r\n    variables: {\r\n      colorText: resolveCssVariable(fontColor),\r\n      colorPrimary: secondary,\r\n      accessibleColorOnColorPrimary: stripeFontColor,\r\n      accessibleColorOnColorBackground: stripeFontColor,\r\n      tabIconHoverColor: resolveCssVariable('var(--text)'), // card icon color on hover of card button\r\n      colorBackground: resolveCssVariable(buttonBgColor),\r\n      colorDanger: getSafeDangerColor(primaryColor),\r\n      fontFamily: 'Verdana, sans-serif',\r\n      borderRadius: '5px',\r\n    },\r\n    rules: {\r\n      '.TabIcon': {\r\n        fill: 'var(--colorTextPlaceholder)',\r\n      },\r\n      '.TabIcon--selected': {\r\n        fill: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabIcon--selected:hover': {\r\n        fill: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabIcon:hover': {\r\n        fill: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabLabel': {\r\n        color: 'var(--colorTextPlaceholder)',\r\n      },\r\n      '.TabLabel:hover': {\r\n        color: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabLabel--selected': {\r\n        color: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.Tab': {\r\n        color: secondary,\r\n      },\r\n      '.Tab:hover': {\r\n        border: `1px solid ${secondary}`,\r\n        outline: `1px solid ${secondary}`,\r\n        color: secondary,\r\n      },\r\n      '.Tab--selected:hover': {\r\n        outline: `2px solid ${secondary}`,\r\n        color: secondary,\r\n      },\r\n      '.Input': {\r\n        color: 'var(--colorTextPlaceholder)',\r\n      },\r\n      '.Input:focus': {\r\n        color: resolveCssVariable('var(--text)'),\r\n      },\r\n    },\r\n  } as Appearance;\r\n};\r\n\r\nexport const getContrastColor = (backgroundColor: string, fontColor = 'var(--text)') => {\r\n  // convert hex color to RGB\r\n  const hexToRgba = (hex: string): { r: number; g: number; b: number; a: number } => {\r\n    const hexColor = resolveCssVariable(hex);\r\n    const validHex = /^#?([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/;\r\n\r\n    if (!validHex.test(hexColor)) {\r\n      return { r: 0, g: 0, b: 0, a: 1 };\r\n    }\r\n    const formattedHex = hexColor.length === 4 ? `#${[hexColor.slice(1)].map(char => char + char).join('')}` : hexColor.startsWith('#') ? hexColor : `#${hexColor}`;\r\n\r\n    const bigint = parseInt(formattedHex.slice(1), 16);\r\n\r\n    if (formattedHex.length === 9) {\r\n      return {\r\n        r: (bigint >> 24) & 255,\r\n        g: (bigint >> 16) & 255,\r\n        b: (bigint >> 8) & 255,\r\n        a: (bigint & 255) / 255,\r\n      };\r\n    }\r\n    return {\r\n      r: (bigint >> 16) & 255,\r\n      g: (bigint >> 8) & 255,\r\n      b: bigint & 255,\r\n      a: 1,\r\n    };\r\n  };\r\n\r\n  // calculate luminance of RGBA color\r\n  const getLuminance = ({ r, g, b, a }: { r: number; g: number; b: number; a: number }): number => {\r\n    const channels = [r, g, b].map(v => {\r\n      const normalized = v / 255;\r\n      return normalized <= 0.03928 ? normalized / 12.92 : Math.pow((normalized + 0.055) / 1.055, 2.4);\r\n    });\r\n\r\n    const luminance = 0.2126 * channels[0] + 0.7152 * channels[1] + 0.0722 * channels[2];\r\n\r\n    // Adjust luminance for transparency (blending the background color with the transparent color)\r\n    return a * luminance + (1 - a) * 0.2126; // 0.2126 is the luminance of pure black\r\n  };\r\n\r\n  // Calculate contrast ratio between two luminance values\r\n  const getContrastRatio = (lum1: number, lum2: number): number => {\r\n    const [L1, L2] = lum1 > lum2 ? [lum1, lum2] : [lum2, lum1];\r\n    return (L1 + 0.05) / (L2 + 0.05);\r\n  };\r\n\r\n  // Parse the background color and calculate its luminance\r\n  const bgRgba = hexToRgba(backgroundColor);\r\n  const bgLuminance = getLuminance(bgRgba);\r\n\r\n  // Parse the font color and calculate its luminance\r\n  const fontRgba = hexToRgba(fontColor);\r\n  const fontLuminance = getLuminance(fontRgba);\r\n\r\n  // Calculate contrast ratios with black and white\r\n  const contrastWithWhite = getContrastRatio(bgLuminance, 1);\r\n  const contrastWithBlack = getContrastRatio(bgLuminance, 0);\r\n\r\n  // Calculate contrast ratio with given font color\r\n  const contrast = getContrastRatio(bgLuminance, fontLuminance);\r\n\r\n  return {\r\n    isContrastGood: contrast >= 4.5, // WCAG AA standard\r\n    actualContrast: contrast,\r\n    blackOrWhite: contrastWithWhite >= contrastWithBlack ? 'var(--common-white)' : 'var(--common-black)',\r\n  };\r\n};\r\n\r\n// Returns a high-contrast \"danger\" (reddish) color for a given background.\r\nexport const getSafeDangerColor = (backgroundColor: string): string => {\r\n  // some reddish colors that could be used:\r\n  const dangerRedColors: string[] = [\r\n    'var(--error-color)',\r\n    '#FF0000',\r\n    '#E60000',\r\n    '#CC0000',\r\n    '#B20000',\r\n    '#990000',\r\n    '#800000',\r\n    '#FF1A1A',\r\n    '#FF3333',\r\n    '#c40e0e',\r\n    '#e31e1e',\r\n    '#b50707',\r\n    '#990F02',\r\n    '#800020',\r\n    '#660000',\r\n    '#4D0000',\r\n    '#a30202',\r\n    '#ff1e00',\r\n    '#f5160a',\r\n    '#ed1123',\r\n    '#D32F2F',\r\n    '#C62828',\r\n    '#B71C1C',\r\n    '#d91a04',\r\n    '#fa2f2f',\r\n    '#f50707',\r\n    '#8B0000',\r\n    '#f5022f',\r\n    '#B22222',\r\n    '#DC143C',\r\n    '#910029',\r\n    'fc0000',\r\n  ];\r\n\r\n  for (const dangerColor of dangerRedColors) {\r\n    if (getContrastColor(backgroundColor, dangerColor).isContrastGood) {\r\n      return resolveCssVariable(dangerColor); // Return the first safe red\r\n    }\r\n  }\r\n  // If no red is safe, return black or white\r\n  return resolveCssVariable(getContrastColor(backgroundColor).blackOrWhite);\r\n};\r\n"],"version":3}