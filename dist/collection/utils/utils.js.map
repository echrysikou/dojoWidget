{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Appearance } from '@stripe/stripe-js';\r\nimport { predefinedThemes, WG_DEFAULT_BUTTON_BG, WG_DEFAULT_ELEMENT_BORDER } from './constants';\r\n\r\nexport function format(first?: string, middle?: string, last?: string): string {\r\n  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\r\n}\r\n\r\n// It capitalizes the first letter of each word in the string and makes the rest lowercase.\r\nexport const capitalizeFirstCharOfEachWord = (text: string) => {\r\n  return text\r\n    .toLowerCase()\r\n    .split(' ')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n};\r\n\r\nexport const resolveCssVariable = (cssVar: string): string => {\r\n  if (!cssVar || cssVar === '' || !cssVar.startsWith('var(')) return cssVar; // Return as-is if not a CSS variable\r\n\r\n  try {\r\n    const variableName = cssVar.substring(4, cssVar.indexOf(')')).trim();\r\n    const computedStyle = window.getComputedStyle(document.documentElement);\r\n    return computedStyle.getPropertyValue(variableName).trim();\r\n  } catch (error) {\r\n    console.error(`Error resolving CSS variable: ${cssVar}`, error);\r\n    return cssVar;\r\n  }\r\n};\r\n\r\nexport const areColorArraysEqual = (arr1: string[], arr2: string[]): boolean =>\r\n  arr1.length === arr2.length && arr1.every((val, index) => resolveCssVariable(val) === resolveCssVariable(arr2[index]));\r\n\r\nexport const getAvatarInitials = (name: string, surname: string) => {\r\n  if (name && surname) {\r\n    return name.charAt(0).toUpperCase() + surname.charAt(0).toUpperCase();\r\n  } else if (name) {\r\n    return name.charAt(0).toUpperCase() + name.charAt(1).toUpperCase();\r\n  } else if (surname) {\r\n    return surname.charAt(0).toUpperCase() + surname.charAt(1).toUpperCase();\r\n  } else {\r\n    return 'UU'; //Unknown User\r\n  }\r\n};\r\n\r\nexport const getWidgetButtonAndBorderColors = (primaryColor, secondaryColor) => {\r\n  let buttonBgColor = WG_DEFAULT_BUTTON_BG;\r\n  let elemBorderColor = WG_DEFAULT_ELEMENT_BORDER;\r\n\r\n  if (primaryColor && secondaryColor) {\r\n    const theme = predefinedThemes.find(t => areColorArraysEqual(t.colors, [primaryColor, secondaryColor]));\r\n    buttonBgColor = theme?.buttonBgColor ?? WG_DEFAULT_BUTTON_BG;\r\n    elemBorderColor = theme?.elementBorderColor ?? WG_DEFAULT_ELEMENT_BORDER;\r\n  }\r\n\r\n  return { buttonBgColor, elemBorderColor };\r\n};\r\n\r\nexport const getStripeWidgetFontColor = (bgColor: string, fontClr: string) => {\r\n  return resolveCssVariable(getContrastColor(bgColor, fontClr).isContrastGood ? fontClr : getContrastColor(bgColor).blackOrWhite);\r\n};\r\n\r\nexport const getStripeElementAppearance = (fontColor, primaryColor, secondaryColor) => {\r\n  const secondary = resolveCssVariable(secondaryColor);\r\n  const buttonBgColor = getWidgetButtonAndBorderColors(primaryColor, secondaryColor).buttonBgColor;\r\n  const stripeFontColor =  getStripeWidgetFontColor(buttonBgColor, fontColor)\r\n\r\n  return {\r\n    // https://docs.stripe.com/elements/appearance-api\r\n    theme: 'stripe' as Appearance[\"theme\"],\r\n    variables: {\r\n      colorText: resolveCssVariable(fontColor),\r\n      colorPrimary: secondary,\r\n      accessibleColorOnColorPrimary: stripeFontColor,\r\n      accessibleColorOnColorBackground: stripeFontColor,\r\n      tabIconHoverColor: resolveCssVariable('var(--text)'), // card icon color on hover of card button\r\n      colorBackground: resolveCssVariable(buttonBgColor),\r\n      colorDanger: getSafeDangerColor(primaryColor),\r\n      fontFamily: 'Verdana, sans-serif',\r\n      borderRadius: '5px',\r\n    },\r\n    rules: {\r\n      '.TabIcon': {\r\n        fill: 'var(--colorTextPlaceholder)',\r\n      },\r\n      '.TabIcon--selected': {\r\n        fill: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabIcon--selected:hover': {\r\n        fill: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabIcon:hover': {\r\n        fill: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabLabel': {\r\n        color: 'var(--colorTextPlaceholder)',\r\n      },\r\n      '.TabLabel:hover': {\r\n        color: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.TabLabel--selected': {\r\n        color: resolveCssVariable('var(--text)'),\r\n      },\r\n      '.Tab': {\r\n        color: secondary,\r\n      },\r\n      '.Tab:hover': {\r\n        border: `1px solid ${secondary}`,\r\n        outline: `1px solid ${secondary}`,\r\n        color: secondary,\r\n      },\r\n      '.Tab--selected:hover': {\r\n        outline: `2px solid ${secondary}`,\r\n        color: secondary,\r\n      },\r\n      '.Input': {\r\n        color: 'var(--colorTextPlaceholder)',\r\n      },\r\n      '.Input:focus': {\r\n        color: resolveCssVariable('var(--text)'),\r\n      },\r\n    },\r\n  } as Appearance;\r\n};\r\n\r\nexport const getContrastColor = (backgroundColor: string, fontColor = 'var(--text)') => {\r\n  // convert hex color to RGB\r\n  const hexToRgba = (hex: string): { r: number; g: number; b: number; a: number } => {\r\n    const hexColor = resolveCssVariable(hex);\r\n    const validHex = /^#?([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/;\r\n\r\n    if (!validHex.test(hexColor)) {\r\n      return { r: 0, g: 0, b: 0, a: 1 };\r\n    }\r\n    const formattedHex = hexColor.length === 4 ? `#${[hexColor.slice(1)].map(char => char + char).join('')}` : hexColor.startsWith('#') ? hexColor : `#${hexColor}`;\r\n\r\n    const bigint = parseInt(formattedHex.slice(1), 16);\r\n\r\n    if (formattedHex.length === 9) {\r\n      return {\r\n        r: (bigint >> 24) & 255,\r\n        g: (bigint >> 16) & 255,\r\n        b: (bigint >> 8) & 255,\r\n        a: (bigint & 255) / 255,\r\n      };\r\n    }\r\n    return {\r\n      r: (bigint >> 16) & 255,\r\n      g: (bigint >> 8) & 255,\r\n      b: bigint & 255,\r\n      a: 1,\r\n    };\r\n  };\r\n\r\n  // calculate luminance of RGBA color\r\n  const getLuminance = ({ r, g, b, a }: { r: number; g: number; b: number; a: number }): number => {\r\n    const channels = [r, g, b].map(v => {\r\n      const normalized = v / 255;\r\n      return normalized <= 0.03928 ? normalized / 12.92 : Math.pow((normalized + 0.055) / 1.055, 2.4);\r\n    });\r\n\r\n    const luminance = 0.2126 * channels[0] + 0.7152 * channels[1] + 0.0722 * channels[2];\r\n\r\n    // Adjust luminance for transparency (blending the background color with the transparent color)\r\n    return a * luminance + (1 - a) * 0.2126; // 0.2126 is the luminance of pure black\r\n  };\r\n\r\n  // Calculate contrast ratio between two luminance values\r\n  const getContrastRatio = (lum1: number, lum2: number): number => {\r\n    const [L1, L2] = lum1 > lum2 ? [lum1, lum2] : [lum2, lum1];\r\n    return (L1 + 0.05) / (L2 + 0.05);\r\n  };\r\n\r\n  // Parse the background color and calculate its luminance\r\n  const bgRgba = hexToRgba(backgroundColor);\r\n  const bgLuminance = getLuminance(bgRgba);\r\n\r\n  // Parse the font color and calculate its luminance\r\n  const fontRgba = hexToRgba(fontColor);\r\n  const fontLuminance = getLuminance(fontRgba);\r\n\r\n  // Calculate contrast ratios with black and white\r\n  const contrastWithWhite = getContrastRatio(bgLuminance, 1);\r\n  const contrastWithBlack = getContrastRatio(bgLuminance, 0);\r\n\r\n  // Calculate contrast ratio with given font color\r\n  const contrast = getContrastRatio(bgLuminance, fontLuminance);\r\n\r\n  return {\r\n    isContrastGood: contrast >= 4.5, // WCAG AA standard\r\n    actualContrast: contrast,\r\n    blackOrWhite: contrastWithWhite >= contrastWithBlack ? 'var(--common-white)' : 'var(--common-black)',\r\n  };\r\n};\r\n\r\n// Returns a high-contrast \"danger\" (reddish) color for a given background.\r\nexport const getSafeDangerColor = (backgroundColor: string): string => {\r\n  // some reddish colors that could be used:\r\n  const dangerRedColors: string[] = [\r\n    'var(--error-color)',\r\n    '#FF0000',\r\n    '#E60000',\r\n    '#CC0000',\r\n    '#B20000',\r\n    '#990000',\r\n    '#800000',\r\n    '#FF1A1A',\r\n    '#FF3333',\r\n    '#c40e0e',\r\n    '#e31e1e',\r\n    '#b50707',\r\n    '#990F02',\r\n    '#800020',\r\n    '#660000',\r\n    '#4D0000',\r\n    '#a30202',\r\n    '#ff1e00',\r\n    '#f5160a',\r\n    '#ed1123',\r\n    '#D32F2F',\r\n    '#C62828',\r\n    '#B71C1C',\r\n    '#d91a04',\r\n    '#fa2f2f',\r\n    '#f50707',\r\n    '#8B0000',\r\n    '#f5022f',\r\n    '#B22222',\r\n    '#DC143C',\r\n    '#910029',\r\n    'fc0000',\r\n  ];\r\n\r\n  for (const dangerColor of dangerRedColors) {\r\n    if (getContrastColor(backgroundColor, dangerColor).isContrastGood) {\r\n      return resolveCssVariable(dangerColor); // Return the first safe red\r\n    }\r\n  }\r\n  // If no red is safe, return black or white\r\n  return resolveCssVariable(getContrastColor(backgroundColor).blackOrWhite);\r\n};\r\n"]}